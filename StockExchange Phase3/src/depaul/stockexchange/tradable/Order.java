/*
 * Copyright 2015 jimliu.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package depaul.stockexchange.tradable;

import depaul.stockexchange.BookSide;
import depaul.stockexchange.DataValidationException;
import depaul.stockexchange.price.Price;

/**
 * An Order represents a request from a user to BUY or SELL a specific quantity of 
 * certain stock either at a specified price, or at the current market price.
 * 
 * @author      Xin Guo
 * @author      Yuancheng Zhang
 * @author      Junmin Liu
 */

public class Order extends TradableImplement implements Tradable {

    
    /**
     * Creates an Order object. The 5 parameters passed in should be used to 
     * set the corresponding Order data members. The constructor should also 
     * set the Order's remaining volume to the original volume value, since all 
     * Orders start with the remaining volume equal to the original volume.
     * 
     * NOTE, the Order's id should be set in the constructor to the following combined String:
     * id = the user name + the product symbol + the order price + the current time in nanoseconds**.
     * 
     * @param userName
     * 		the user name (e.g. REX)
     * @param productSymbol
     * 		the product (stock) symbol (e.g. AMZN)
     * @param orderPrice
     * 		the order price (e.g. $257.09)
     * @param originalVolume
     * 		the original volume (i.e., the original quantity) of the Order
     * @param side
     * 		"BUT" or "SELL" side
     * @throws DataValidationException
     *		If the user name is either null or an empty string, throws an exception. 
     * 		If the product symbol is either null or an empty string, throws an exception. 
     * 		If the original volume is set as zero or negative number, throws an exception.
     * 		If the value is invalid (i.e., if the value is negative, 
     * 		or if the requested cancelled volume plus the current remaining volume 
     * 		exceeds the original volume), throw an exception.
     */
    public Order(String userName, String productSymbol, Price orderPrice, 
            int originalVolume, BookSide side) throws DataValidationException {
        this.setPrice(orderPrice);
        this.setUser(userName);
        this.setProduct(productSymbol);
        this.setOriginalVolume(originalVolume);
        this.setRemainingVolume(originalVolume);
        this.setSide(side);
        this.buildId();
    }
    
    /**
     * Sets the Order's "id".
     * NOTE, the Order's "id" should be set in the constructor to the following combined String:
     * id = the user name + the product symbol + the order price + the current time in nanoseconds**
     * 
     */
    @Override
    protected final void buildId() {
        this.id = String.format("%s%s%s%s", this.getUser(), this.getProduct(), 
                this.getPrice(), System.nanoTime());
    }
    
    /**
     * Returns true if the Tradable is part of a Quote, 
     * returns false if not (i.e., false if itï¿½s part of an order)
     * @return 
     */
    @Override
    public boolean isQuote() {
        return false;
    }
    

    /**
     * Generates a String representing the key values in this order. 
     * Recommended String value generated by your toString:
     * USER1 order: BUY 250 GE at $21.59 (Original Vol: 250, CXL'd Vol: 0), 
     * ID: USER1GE$21.591684416944495943
     */
    @Override
    public String toString() {
        return String.format("%s order: %s %s %s at %s "
                + "(Original Vol: %s, CXL'd Vol: %s), ID: %s", 
                user, side, remainingVolume, product, 
                price, originalVolume, cancelledVolume, id);
    }

}